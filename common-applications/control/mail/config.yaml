# configmap for mail exim4 service, these three files are directly read from exim config folder
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-exim4-configmap
  namespace: mail
data:
  25_mm3_macros: |
    # Place this file at
    # /etc/exim4/conf.d/main/25_mm3_macros

    domainlist mm3_domains=lists.osinfra.cn:lists.openhetuengine.org:lists.george-cao.site
    MM3_LMTP_HOST=mailman-core-0.mail-suit-service.mail.svc.cluster.local
    MM3_LMTP_PORT=8024
    # According to the configuration of: https://mailman.readthedocs.io/en/release-3.0/src/mailman/docs/MTA.html
    # We need updating this, for the purpose of delivering emails to the mailman
    MM3_HOME=/opt/mailman/var

    ################################################################
    # The configuration below is boilerplate:
    # you should not need to change it.

    # The path to the list receipt (used as the required file when
    # matching list addresses)
    MM3_LISTCHK=MM3_HOME/lists/${local_part}.${domain}

  00_local_macros: |
    DKIM_CANON = relaxed
    DKIM_SELECTOR = default
    DKIM_DOMAIN = ${lc:${domain:$h_from:}}
    DKIM_FILE = /etc/exim4/dkim/dkim.key
    DKIM_PRIVATE_KEY=${if exists{DKIM_FILE}{DKIM_FILE}{0}}
    MAIN_LOG_SELECTOR = +subject +deliver_time +received_sender +return_path_on_delivery +sender_on_delivery +unknown_in_list +smtp_protocol_error +smtp_syntax_error +tls_certificate_verified +tls_peerdn -host_lookup_failed
    MAIN_TLS_ENABLE = yes
    MAIN_TLS_CERTIFICATE = ${if exists{/etc/exim4/ssl_pool/${tls_sni}.crt}{/etc/exim4/ssl_pool/${tls_sni}.crt}{/etc/exim4/ssl_pool/lists.osinfra.cn.crt}}
    MAIN_TLS_PRIVATEKEY = ${if exists{/etc/exim4/ssl_pool/${tls_sni}.key}{/etc/exim4/ssl_pool//${tls_sni}.key}{/etc/exim4/ssl_pool/lists.osinfra.cn.key}}
    AUTH_SERVER_ALLOW_NOTLS_PASSWORDS = true
    MAIN_TLS_ADVERTISE_HOSTS=*
    IGNORE_SMTP_LINE_LENGTH_LIMIT=true
    daemon_smtp_ports = 25 : 465
    tls_on_connect_ports = 465

  55_mm3_transport: |
    # Place this file at
    # /etc/exim4/conf.d/transport/55_mm3_transport

    mailman3_transport:
      debug_print = "Email for mailman"
      driver = smtp
      protocol = lmtp
      allow_localhost
      hosts = MM3_LMTP_HOST
      port = MM3_LMTP_PORT
      rcpt_include_affixes = true

  455_mm3_router: |
    # Place this file at
    # /etc/exim4/conf.d/router/455_mm3_router

    mailman3_router:
      driver = accept
      domains = +mm3_domains
      require_files = MM3_LISTCHK
      local_part_suffix_optional
      local_part_suffix = -admin : \
         -bounces   : -bounces+* : \
         -confirm   : -confirm+* : \
         -join      : -leave     : \
         -owner     : -request   : \
         -subscribe : -unsubscribe
      transport = mailman3_transport

  01_exim4-config_listmacrosdefs: |
    # Place this file at
    # /etc/exim4/conf.d/main/01_exim4-config_listmacrosdefs
    log_file_path = /var/log/exim4/%s.%M
    exim_path = /usr/sbin/exim4

    # Macro defining the main configuration directory.
    # We do not use absolute paths.
    .ifndef CONFDIR
    CONFDIR = /etc/exim4
    .endif

    # debconf-driven macro definitions get inserted after this line
    UPEX4CmacrosUPEX4C = 1

    # Create domain and host lists for relay control
    # '@' refers to 'the name of the local host'

    # List of domains considered local for exim. Domains not listed here
    # need to be deliverable remotely.
    domainlist local_domains = MAIN_LOCAL_DOMAINS

    # List of recipient domains to relay _to_. Use this list if you're -
    # for example - fallback MX or mail gateway for domains.
    domainlist relay_to_domains = MAIN_RELAY_TO_DOMAINS

    # List of sender networks (IP addresses) to _unconditionally_ relay
    # _for_. If you intend to be SMTP AUTH server, you do not need to enter
    # anything here.
    hostlist relay_from_hosts = MAIN_RELAY_NETS


    # Decide which domain to use to add to all unqualified addresses.
    # If MAIN_PRIMARY_HOSTNAME_AS_QUALIFY_DOMAIN is defined, the primary
    # hostname is used. If not, but MAIN_QUALIFY_DOMAIN is set, the value
    # of MAIN_QUALIFY_DOMAIN is used. If both macros are not defined,
    # the first line of /etc/mailname is used.
    .ifndef MAIN_PRIMARY_HOSTNAME_AS_QUALIFY_DOMAIN
    .ifndef MAIN_QUALIFY_DOMAIN
    qualify_domain = ETC_MAILNAME
    .else
    qualify_domain = MAIN_QUALIFY_DOMAIN
    .endif
    .endif

    # listen on all all interfaces?
    .ifdef MAIN_LOCAL_INTERFACES
    local_interfaces = MAIN_LOCAL_INTERFACES
    .endif

    .ifndef LOCAL_DELIVERY
    # The default transport, set in /etc/exim4/update-exim4.conf.conf,
    # defaulting to mail_spool. See CONFDIR/conf.d/transport/ for possibilities
    LOCAL_DELIVERY=mail_spool
    .endif

    # The gecos field in /etc/passwd holds not only the name. see passwd(5).
    gecos_pattern = ^([^,:]*)
    gecos_name = $1

    .ifndef CHECK_RCPT_LOCAL_LOCALPARTS
    CHECK_RCPT_LOCAL_LOCALPARTS = ^[.] : ^.*[@%!/|`#&?]
    .endif

    .ifndef CHECK_RCPT_REMOTE_LOCALPARTS
    CHECK_RCPT_REMOTE_LOCALPARTS = ^[./|] : ^.*[@%!`#&?] : ^.*/\\.\\./
    .endif

  30_exim4-config_examples: |
    # Place this file at
    # /etc/exim4/conf.d/auth/30_exim4-config_examples

    plain_server:
      driver = plaintext
      public_name = PLAIN
      server_condition = "${if crypteq{$auth3}{${extract{1}{:}{${lookup{$auth2}lsearch{CONFDIR/passwd}{$value}{*:*}}}}}{1}{0}}"
      server_set_id = $auth2
      server_prompts = :
      .ifndef AUTH_SERVER_ALLOW_NOTLS_PASSWORDS
      server_advertise_condition = ${if eq{$tls_in_cipher}{}{}{*}}
      .endif

    login_server:
      driver = plaintext
      public_name = LOGIN
      server_prompts = "Username:: : Password::"
      server_condition = "${if crypteq{$auth2}{${extract{1}{:}{${lookup{$auth1}lsearch{CONFDIR/passwd}{$value}{*:*}}}}}{1}{0}}"
      server_set_id = $auth1
      .ifndef AUTH_SERVER_ALLOW_NOTLS_PASSWORDS
      server_advertise_condition = ${if eq{$tls_in_cipher}{}{}{*}}
      .endif

    cram_md5:
      driver = cram_md5
      public_name = CRAM-MD5
      client_name = ${extract{1}{:}{${lookup{$host}nwildlsearch{CONFDIR/passwd.client}{$value}fail}}}
      client_secret = ${extract{2}{:}{${lookup{$host}nwildlsearch{CONFDIR/passwd.client}{$value}fail}}}

    # this returns the matching line from passwd.client and doubles all ^
    PASSWDLINE=${sg{\
                    ${lookup{$host}nwildlsearch{CONFDIR/passwd.client}{$value}fail}\
    	        }\
    	        {\\N[\\^]\\N}\
    	        {^^}\
    	    }

    plain:
      driver = plaintext
      public_name = PLAIN
    .ifndef AUTH_CLIENT_ALLOW_NOTLS_PASSWORDS
      client_send = "<; ${if !eq{$tls_out_cipher}{}\
                        {^${extract{1}{:}{PASSWDLINE}}\
    		     ^${sg{PASSWDLINE}{\\N([^:]+:)(.*)\\N}{\\$2}}\
    		   }fail}"
    .else
      client_send = "<; ^${extract{1}{:}{PASSWDLINE}}\
    		    ^${sg{PASSWDLINE}{\\N([^:]+:)(.*)\\N}{\\$2}}"
    .endif

    login:
      driver = plaintext
      public_name = LOGIN
    .ifndef AUTH_CLIENT_ALLOW_NOTLS_PASSWORDS
      # Return empty string if not non-TLS AND looking up $host in passwd-file
      # yields a non-empty string; fail otherwise.
      client_send = "<; ${if and{\
                              {!eq{$tls_out_cipher}{}}\
                              {!eq{PASSWDLINE}{}}\
                             }\
                          {}fail}\
                     ; ${extract{1}{::}{PASSWDLINE}}\
    		 ; ${sg{PASSWDLINE}{\\N([^:]+:)(.*)\\N}{\\$2}}"
    .else
      # Return empty string if looking up $host in passwd-file yields a
      # non-empty string; fail otherwise.
      client_send = "<; ${if !eq{PASSWDLINE}{}\
                          {}fail}\
                     ; ${extract{1}{::}{PASSWDLINE}}\
    		 ; ${sg{PASSWDLINE}{\\N([^:]+:)(.*)\\N}{\\$2}}"
    .endif

  update-exim4-conf.conf: |
    dc_eximconfig_configtype='internet'
    dc_other_hostnames='lists.osinfra.cn;lists.openhetuengine.org;lists.george-cao.site'
    dc_local_interfaces=''
    dc_readhost=''
    dc_relay_domains=''
    dc_minimaldns='false'
    dc_relay_nets='172.20.0.0/16'
    dc_smarthost=''
    CFILEMODE='644'
    dc_use_split_config='true'
    dc_hide_mailname=''
    dc_mailname_in_oh='true'
    dc_localdelivery='mail_spool'

# configmap for mail web service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-web-configmap
  namespace: mail
data:
  base2.html: |
    {% load i18n %}
    {% load compress %}
    {% load static %}
    {% load gravatar %}
    <!DOCTYPE HTML>
    <html>
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <meta name="ROBOTS" content="INDEX, FOLLOW" />
            <title>{% block head_title %}{{ site_name }}{% endblock %}</title>
            <meta name="author" content="" />
            <meta name="dc.language" content="en" />
            <link rel="shortcut icon" href="{% static 'hyperkitty/img/favicon.ico' %}" />
            <link rel="stylesheet" href="{% static 'hyperkitty/libs/jquery/smoothness/jquery-ui-1.10.3.custom.min.css' %}" type="text/css" media="all" />
            <link rel="stylesheet" href="{% static 'hyperkitty/libs/fonts/font-awesome/css/font-awesome.min.css' %}" type="text/css" media="all" />
            {% compress css %}
            <link rel="stylesheet" href="{% static 'hyperkitty/libs/fonts/icomoon/icomoon.css' %}" type="text/css" media="all" />
            <link rel="stylesheet" href="{% static 'hyperkitty/libs/fonts/droid/droid.css' %}" type="text/css" media="all" />
            <link rel="stylesheet" href="{% static 'django-mailman3/css/main.css' %}" />
            <link rel="stylesheet" type="text/x-scss" media="all" href="{% static 'hyperkitty/sass/hyperkitty.scss' %}" />
            {% endcompress %}
            {% block additional_stylesheets %} {% endblock %}
            {% include 'hyperkitty/headers.html' %}
        </head>

        <body>

        {% include 'hyperkitty/top.html' %}

        <nav class="navbar sticky-top navbar-light bg-light navbar-expand-md">
            <div class="container">
                <div class="navbar-header col-md"> <!--part of navbar that's always present-->
                    <button type="button" class="navbar-toggler collapsed" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="fa fa-bars"></span>
                    </button>
                    {% include 'hyperkitty/navbar-brand.html' %}
                </div> <!-- /navbar-header -->

                <div class="navbar-collapse collapse justify-content-end"> <!--part of navbar that's collapsed on small screens-->
                    <!-- show dropdown for smaller viewports b/c login name/email may be too long -->
                    <!-- only show this extra button/dropdown if we're in small screen sizes -->
                    <div class="nav navbar-nav navbar-right auth dropdown d-sm-none">
                    <a href="#" role="button" class="btn dropdown-toggle" id="loginDropdownMenu"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            {% if user.is_authenticated %}
                                {% gravatar user.email 20 %}
                            {% else %}
                                <span class="fa fa-bars"></span>
                            {% endif %}
                        </a>
                        {% if user.is_authenticated %}
                            <div class="dropdown-menu">
                                <a role="menuitem" tabindex="-1" class="dropdown-item" href="{% url 'mm_user_profile' %}">
                                    <span class="fa fa-user"></span>
                                    {% trans 'Account' %}
                                </a>
                                {% if 'postorius' in INSTALLED_APPS %}
                                <a role="menuitem" tabindex="-1" class="dropdown-item" href="{% url 'ps_user_profile' %}">
                                    <span class="fa fa-cog"></span>
                                    {% trans 'Mailman settings' %}
                                </a>
                                {% endif %}
                                <a role="menuitem" tabindex="-1" class="dropdown-item" href="{% url 'hk_user_profile' %}">
                                    <span class="fa fa-comments"></span>
                                    {% trans 'Posting activity' %}
                                </a>
                                <div class="dropdown-divider"></div>
                                <a role="menuitem" tabindex="-1" class="dropdown-item" href="{% url LOGOUT_URL %}?next={% url 'hk_root' %}">
                                    <span class="fa fa-sign-out"></span>
                                    {% trans "Logout" %}
                                </a>
                            </div> <!-- dropdown menu -->
                            {% else %}
                                <a role="menuitem" tabindex="-1" href="{% url LOGIN_URL %}?next={{next|default:request.path|urlencode}}">
                                    <span class="fa fa-sign-in"></span>
                                    {% trans "Sign In" %}
                                </a>
                                <!-- disable signup --<a role="menuitem" tabindex="-1" href="">
                                    <span class="fa fa-user-plus"></span>
                                    {% trans "Sign Up" %}
                                </a>-->
                            {% endif %}

                    </div>
                    <form name="search" method="get" action="{% url 'hk_search' %}" class="navbar-form navbar-right my-2 my-lg-2 order-1" role="search">
                        {% if mlist %}<input type="hidden" name="mlist" value="{{ mlist.name }}" />{% endif %}
                            <div class="input-group">
                                <input name="q" type="text" class="form-control mr-sm-2"
                                    placeholder="{% if mlist %}{% trans 'Search this list' %}{% else %}{% trans 'Search all lists' %}{% endif %}"
                                    {% if query %}value="{{ query }}"{% endif %}
                                    />
                                <span class="input-group-btn">
                                    <button class="btn btn-secondary my-2 my-sm-0 " type="submit"><span class="fa fa-search"></span></button>
                                </span>
                            </div>
                    </form>
                    <!-- larger viewports -->
                    <ul class="nav navbar-nav d-none d-sm-flex auth order-3">
                        {% if user.is_authenticated %}
                            <li class="dropdown nav-item">
                                <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown"
                                role="button" aria-haspopup="true" aria-expanded="false">
                                    {% gravatar user.email 20 %}
                                    {{ user.username|truncatechars:"35" }}
                                    <span class="caret"></span>
                                </a>
                                <div class="dropdown-menu">
                                    <a href="{% url 'mm_user_profile' %}" class="dropdown-item">
                                        <span class="fa fa-user"></span>
                                        {% trans 'Account' %}
                                    </a>
                                    {% if 'postorius' in INSTALLED_APPS %}
                                    <a href="{% url 'ps_user_profile' %}" class="dropdown-item">
                                        <span class="fa fa-cog"></span>
                                        {% trans 'Mailman settings' %}
                                    </a>
                                    {% endif %}
                                    <a href="{% url 'hk_user_profile' %}" class="dropdown-item">
                                        <span class="fa fa-comments"></span>
                                        {% trans 'Posting activity' %}
                                    </a>
                                    <div role="separator" class="dropdown-divider"></div>
                                    <a href="{% url LOGOUT_URL %}?next={% url 'hk_root' %}" class="dropdown-item">
                                        <span class="fa fa-sign-out"></span>
                                        {% trans "Logout" %}
                                    </a>
                                </div>
                            </li>
                        {% else %}
                            <li class="nav-item"><a href="{% url LOGIN_URL %}?next={{next|default:request.path|urlencode}}" class="nav-link">
                                <span class="fa fa-sign-in"></span>
                                {% trans "Sign In" %}
                            </a></li>
                            <!--disable signup--<li class="nav-item"><a href="">
                                <span class="fa fa-user-plus"></span>
                                {% trans "Sign Up" %}
                            </a></li>-->
                        {% endif %}
                    </ul>

                    {% if 'postorius' in INSTALLED_APPS %}
                    <ul class="nav navbar-nav order-2">
                        <li class="nav-item">
                        {% if mlist %}
                        <a href="{% url 'list_summary' mlist.list_id %}" class="nav-link">
                            <span class="fa fa-cog"></span>
                            {% trans 'Manage this list' %}
                        </a>
                        {% else %}
                        <a href="{% url 'list_index' %}" class="nav-link">
                            <span class="fa fa-cog"></span>
                            {% trans 'Manage lists' %}
                        </a>
                        {% endif %}
                        </li>
                    </ul>
                    {% endif %}


                </div> <!--/navbar-collapse -->
            </div> <!-- /container for navbar -->
        </nav>

        {% if messages %}
        <div class="flashmsgs">
        {% for msg in messages %}
            <div class="flashmsg-wrapper">
                <!--<div class="alert alert-{{ msg.level_tag }}">-->
                <div role="alert" class="alert alert-{{ msg.tags }} {{msg.tags}}
                    {% if msg.level == DEFAULT_MESSAGE_LEVELS.SUCCESS %}
                    ">
                    {% else %}
                    alert-dismissible">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    {% endif %}
                    {{ msg }}
                </div>
            </div>
        {% endfor %}
        </div>
        {% endif %}

        <div class="modal fade" tabindex="-1" role="dialog" id="keyboard-shortcuts">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">{% trans "Keyboard Shortcuts" %}</h4>
            </div>
            <div class="modal-body">
                <h3>{% trans "Thread View" %}</h3>
                <ul>
                <li><code>j</code>: {% trans "Next unread message" %} </li>
                <li><code>k</code>: {% trans "Previous unread message" %} </li>
                <li><code>j a</code>: {% trans "Jump to all threads" %}
                <li><code>j l</code>: {% trans "Jump to MailingList overview" %}
                </ul>
            </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->

        <div class="container">
            {% block content %} {% endblock %}
        </div> <!-- /container for content -->

        <footer class="footer">
        <div class="container">
            <p class="text-muted">
                {% trans 'Powered by' %} <a href="http://hyperkitty.readthedocs.org">HyperKitty</a> {% trans 'version' %} {{ HYPERKITTY_VERSION }}.
            </p>
        </div>
        </footer>

        <script src="{% static 'hyperkitty/libs/jquery/jquery-1.10.1.min.js' %}"></script>
        <script src="{% static 'hyperkitty/libs/jquery/jquery-ui-1.10.3.custom.min.js' %}"></script>
        {% compress js %}
        <script type="text/javascript" src="{% static 'hyperkitty/libs/popper/popper.min.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/libs/bootstrap/javascripts/bootstrap.min.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/libs/mousetrap/mousetrap.min.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/libs/jquery.expander.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/libs/d3.v2.min.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/libs/jquery.hotkeys.js' %}" />
        <script type="text/javascript" src="{% static 'django-mailman3/js/main.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/js/hyperkitty-common.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/js/hyperkitty-index.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/js/hyperkitty-overview.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/js/hyperkitty-thread.js' %}" />
        <script type="text/javascript" src="{% static 'hyperkitty/js/hyperkitty-userprofile.js' %}" />
        {% endcompress %}
        {% block additionaljs %} {% endblock %}

        {% include 'hyperkitty/bottom.html' %}

        </body>
    </html>
  base.html: |
    {% load i18n %}
    {% load static %}
    {% load gravatar %}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block head_title %}{{ site_name }}{% endblock %}</title>
        <link rel="shortcut icon" href="{% static 'postorius/img/favicon.ico' %}">
        <link rel="stylesheet" href="{% static 'postorius/libs/bootstrap/css/bootstrap.min.css' %}">
        <link rel="stylesheet" href="{% static 'django-mailman3/css/main.css' %}">
        <link rel="stylesheet" href="{% static 'postorius/css/style.css' %}">
        <link rel="stylesheet" href="{% static 'postorius/libs/fonts/font-awesome/css/font-awesome.min.css' %}" type="text/css" media="all" />
        {% block additionalcss %}{% endblock %}
        <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
        <script src="{% static 'postorius/libs/html5shiv/html5shiv.min.js' %}"></script>
        <script src="{% static 'postorius/libs/respond/respond.min.js' %}"></script>
        <![endif]-->
    </head>
    <body>
    <nav class="navbar navbar-expand-md navbar-light bg-light navbar-default">
        <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggler collapsed" data-toggle="collapse" data-target="#header-nav" aria-expanded="false">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="fa fa-bars"></span>
                    </button>
                    <a class="navbar-brand" href="{% url 'list_index' %}"><span><img src="{% static 'postorius/img/mailman_logo_small_trans.png' %}" alt="{% trans 'Mailman logo' %}"/> Postorius</span></a>
                </div>
                <div class="collapse navbar-collapse" id="header-nav">
                    <ul class="nav navbar-nav mr-auto">
                        <li class="nav-item"><a href="{% url 'list_index' %}" class="nav-link">
                            <span class="fa fa-envelope"></span>
                            {% trans 'Lists' %}
                        </a></li>
                        {% if user.is_superuser %}
                            <li class="nav-item">
                            <a href="{% url 'domain_index' %}" class="nav-link">
                                <span class="fa fa-globe"></span>
                                {% trans 'Domains' %}
                            </a>
                            </li>
                            <li class="nav-item">
                                <a href="{% url 'global_bans' %}" class="nav-link">
                                    <span class="fa fa-ban"></span>
                                    {% trans 'Bans' %}
                                </a>
                            </li>
                            <li class="nav-item">
                                <a href="{% url 'system_information' %}" class="nav-link">
                                    <span class="fa fa-list-alt"></span>
                                    {% trans 'System Information' %}
                                </a>
                            </li>
                        {% endif %}
                        {% if 'hyperkitty' in INSTALLED_APPS %}
                            <li class="nav-item"><a href="{% url 'hk_root' %}" class="nav-link">
                                <span class="fa fa-comment"></span>
                                {% trans 'Archives' %}
                            </a></li>
                        {% endif %}
                    </ul>
                    <ul class="nav navbar-nav navbar-right">
                        {% if user.is_authenticated %}
                            <li class="dropdown nav-item">
                                <a href="#" class="dropdown-toggle nav-link" data-toggle="dropdown"
                                role="button" aria-haspopup="true" aria-expanded="false">
                                    {% gravatar user.email 20 %}
                                    {{ user.username|truncatechars:"35" }}
                                    <span class="caret"></span>
                                </a>
                                <div class="dropdown-menu">
                                    <a href="{% url 'mm_user_profile' %}" class="dropdown-item">
                                        <span class="fa fa-user"></span>
                                        {% trans 'Account' %}
                                    </a>
                                    <a href="{% url 'ps_user_profile' %}" class="dropdown-item">
                                        <span class="fa fa-cog"></span>
                                        {% trans 'Mailman settings' %}
                                    </a>
                                    {% if 'hyperkitty' in INSTALLED_APPS %}
                                    <a href="{% url 'hk_user_profile' %}" class="dropdown-item">
                                    <span class="fa fa-comment"></span>
                                        {% trans 'Posting activity' %}
                                    </a>
                                    {% endif %}
                                    <div class="dropdown-divider"></div>
                                    <a href="{% url LOGOUT_URL %}?next={% url 'list_index' %}" class="dropdown-item">
                                        <span class="fa fa-sign-out"></span>
                                        {% trans 'Logout' %}
                                    </a>
                                </ul>
                            </li>
                        {% else %}
                            <li class="nav-item"><a class="nav-link" href="{% url LOGIN_URL %}?next={{ next|default:request.path|urlencode }}">
                                <span class="fa fa-sign-in"></span>
                                {% trans 'Login' %}
                            </a></li>
                            <!--Signup is disabled--<li  class="nav-item"><a class="nav-link" href="">
                                <span class="fa fa-user-plus"></span>
                                {% trans 'Sign Up' %}
                            </a></li>-->
                        {% endif %}
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container" role="main">
            {% for message in messages %}
            <div class="alert alert-{{ message.tags }} fade show" role="alert">
                {{ message }}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            {% endfor %}
            {% block content %}{% endblock content %}
        </div>

        <footer class="footer">
            <div class="container">
                <p class="text-center">
                    <a href="https://postorius.readthedocs.org">{% trans 'Postorius Documentation' %}</a>
                    &bull;
                    <a href="http://list.org">GNU Mailman</a>
                    &bull;
                    {% trans 'Postorius Version' %} {{ POSTORIUS_VERSION }}
                    {% if mailman_day %}
                    &bull;
                    {% trans 'Happy Mailman Day!' %}
                    {% endif %}
                </p>
            </div>
        </footer>

        <script src="{% static 'postorius/libs/jquery/jquery-3.6.0.min.js' %}"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
        <script src="{% static 'postorius/libs/bootstrap/js/bootstrap.min.js' %}"></script>
        <script src="{% static 'django-mailman3/js/main.js' %}"></script>
        <script src="{% static 'postorius/js/script.js' %}"></script>
        {% block additionaljs %}{% endblock %}
    </body>
    </html>
  uwsgi.ini: |
    [uwsgi]
    # Port on which uwsgi will be listening.
    uwsgi-socket = 0.0.0.0:8080
    # http-socket = 0.0.0.0:8000

    #Enable threading for python
    enable-threads = true

    # Move to the directory wher the django files are.
    chdir = /opt/mailman-web

    # Use the wsgi file provided with the django project.
    wsgi-file = wsgi.py

    # Setup default number of processes and threads per process.
    master = true
    process = 4

    # Drop privielges and don't run as root.
    uid = mailman
    gid = mailman

    # Setup the django_q related worker processes.
    attach-daemon = ./manage.py qcluster

    # Setup hyperkitty's cron jobs.
    # 'minutely' jobs are run hourly for perf reasons.
    # See https://github.com/maxking/docker-mailman/issues/327
    # unique-cron = 0 -1 -1 -1 -1 ./manage.py runjobs minutely
    unique-cron = -15 -1 -1 -1 -1 ./manage.py runjobs quarter_hourly
    unique-cron = 0 -1 -1 -1 -1 ./manage.py runjobs hourly
    unique-cron = 0 0 -1 -1 -1 ./manage.py runjobs daily
    unique-cron = 0 0 1 -1 -1 ./manage.py runjobs monthly
    unique-cron = 0 0 -1 -1 0 ./manage.py runjobs weekly
    unique-cron = 0 0 1 1 -1 ./manage.py runjobs yearly

    # Setup the request log.
    req-logger = file:/opt/mailman-web-data/logs/uwsgi.log

    # Log cron seperately.
    logger = cron file:/opt/mailman-web-data/logs/uwsgi-cron.log
    log-route = cron uwsgi-cron

    # Log qcluster commands seperately.
    logger = qcluster file:/opt/mailman-web-data/logs/uwsgi-qcluster.log
    log-route = qcluster uwsgi-daemons

    # Last log and it logs the rest of the stuff.
    logger = file:/opt/mailman-web-data/logs/uwsgi-error.log
  settings_local.py: |
    import os
    import socket
    import ipaddress

    DEBUG = False

    SITE_ID = 1

    FILTER_VHOST = True

    TIME_ZONE = "Asia/Shanghai"

    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    #NOTE: this is the MTA host, we need to update it.
    EMAIL_HOST = 'mailman-exim4-service.mail.svc.cluster.local'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    EMAIL_PORT = 25
    MAILMAN_ARCHIVER_FROM = (os.environ.get('MAILMAN_HOST_IP', '172.19.199.2'), '172.20.0.81')

    INSTALLED_APPS = [
    'hyperkitty',
    'postorius',
    'django_mailman3',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_gravatar',
    'compressor',
    'haystack',
    'django_extensions',
    'django_q',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    ]
    ALLOWED_HOSTS = [
        "localhost",
        "0.0.0.0",
        "127.0.0.1",
        os.environ.get('SERVE_FROM_DOMAIN'),
        os.environ.get('DJANGO_ALLOWED_HOSTS'),
        "mailweb.osinfra.cn",
        "mailweb.openhetuengine.org"
    ]
    COMPRESS_CSS_HASHING_METHOD = 'content'
  email.py: |
    # -*- coding: utf-8 -*-
    #
    # Copyright (C) 2014-2019 by the Free Software Foundation, Inc.
    #
    # This file is part of HyperKitty.
    #
    # HyperKitty is free software: you can redistribute it and/or modify it under
    # the terms of the GNU General Public License as published by the Free
    # Software Foundation, either version 3 of the License, or (at your option)
    # any later version.
    #
    # HyperKitty is distributed in the hope that it will be useful, but WITHOUT
    # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
    # more details.
    #
    # You should have received a copy of the GNU General Public License along with
    # HyperKitty.  If not, see <http://www.gnu.org/licenses/>.
    #
    # Author: Aurelien Bompard <abompard@fedoraproject.org>
    #

    import logging
    import os
    import re
    from email.message import EmailMessage
    from email.utils import formataddr

    from django.conf import settings
    from django.db import IntegrityError, models
    from django.utils.timezone import get_fixed_timezone, now

    from hyperkitty.lib.analysis import compute_thread_order_and_depth
    from .common import VotesCachedValue
    from .mailinglist import MailingList
    from .thread import Thread
    from .vote import Vote


    logger = logging.getLogger(__name__)


    class Email(models.Model):
        """
        An archived email, from a mailing-list. It is identified by both the list
        name and the message id.
        """
        mailinglist = models.ForeignKey(
            "MailingList", related_name="emails", on_delete=models.CASCADE)
        message_id = models.CharField(max_length=255, db_index=True)
        message_id_hash = models.CharField(max_length=255, db_index=True)
        sender = models.ForeignKey(
            "Sender", related_name="emails", on_delete=models.CASCADE)
        sender_name = models.CharField(max_length=255, null=True, blank=True)
        subject = models.CharField(max_length=512, db_index=True)
        content = models.TextField()
        date = models.DateTimeField(db_index=True)
        timezone = models.SmallIntegerField()
        in_reply_to = models.CharField(
            max_length=255, null=True, blank=True, db_index=True)
        # XXX(maxking): Delete behavior is handled by on_pre_delete(). Since we
        # manually make sure that we set and unset parents and handle the fact that
        # they can't be None for more than one Email in a thread, we don't want
        # database engine to enforce the relationship is valid. Hence, we set the
        # on_delete=DO_NOTHING and db_constraint=False.
        parent = models.ForeignKey(
            "self", blank=True, null=True, on_delete=models.DO_NOTHING,
            related_name="children", db_constraint=False)
        thread = models.ForeignKey(
            "Thread", related_name="emails", on_delete=models.CASCADE)
        archived_date = models.DateTimeField(default=now, db_index=True)
        thread_depth = models.IntegerField(default=0)
        thread_order = models.IntegerField(null=True, blank=True, db_index=True)

        #ADDRESS_REPLACE_RE = re.compile(r"([\w.+-]+)@([\w.+-]+)")

        def __init__(self, *args, **kwargs):
            super(Email, self).__init__(*args, **kwargs)
            self.cached_values = {
                "votes": VotesCachedValue(self),
            }

        def __lt__(self, other):
            return self.date < other.date

        class Meta:
            unique_together = ("mailinglist", "message_id")

        def get_votes(self):
            return self.cached_values["votes"]()

        def vote(self, value, user):
            # Checks if the user has already voted for this message.
            existing = self.votes.filter(user=user).first()
            if existing is not None and existing.value == value:
                return  # Vote already recorded (should I raise an exception?)
            if value not in (0, 1, -1):
                raise ValueError("A vote can only be +1 or -1 (or 0 to cancel)")
            if existing is not None:
                # vote changed or cancelled
                if value == 0:
                    existing.delete()
                else:
                    existing.value = value
                    existing.save()
            else:
                # new vote
                vote = Vote(email=self, user=user, value=value)
                vote.save()

        def set_parent(self, parent):
            if self.id == parent.id:
                raise ValueError("An email can't be its own parent")
            # Compute the subthread
            subthread = [self]

            def _collect_children(current_email):
                children = list(current_email.children.all())
                if not children:
                    return
                subthread.extend(children)
                for child in children:
                    _collect_children(child)
            _collect_children(self)
            # now set my new parent value
            old_parent_id = self.parent_id
            self.parent = parent
            self.save(update_fields=["parent_id"])
            # If my future parent is in my current subthread, I need to set its
            # parent to my current parent
            if parent in subthread:
                parent.parent_id = old_parent_id
                parent.save(update_fields=["parent_id"])
                # do it after setting the new parent_id to avoid having two
                # parent_ids set to None at the same time (IntegrityError)
            if self.thread_id != parent.thread_id:
                # we changed the thread, reattach the subthread
                former_thread = self.thread
                for child in subthread:
                    child.thread = parent.thread
                    child.save(update_fields=["thread_id"])
                    if child.date > parent.thread.date_active:
                        parent.thread.date_active = child.date
                parent.thread.save()
                # if we were the starting email, or former thread may be empty
                if former_thread.emails.count() == 0:
                    former_thread.delete()
            compute_thread_order_and_depth(parent.thread)

        def as_message(self, escape_addresses=True):
            # http://wordeology.com/computer/how-to-send-good-unicode-email-with-python.html
            # http://stackoverflow.com/questions/31714221/how-to-send-an-email-with-quoted
            # http://stackoverflow.com/questions/9403265/how-do-i-use-python/9509718#9509718
            msg = EmailMessage()

            # Headers
            def unfold(hdr):
                return re.sub('[\r\n]', '', hdr)
            unixfrom = "From %s %s" % (
                self.sender.address, self.archived_date.strftime("%c"))
            assert isinstance(self.sender.address, str)
            header_from = self.sender.address
            if self.sender_name and self.sender_name != self.sender.address:
                header_from = formataddr((self.sender_name, header_from))
            header_to = self.mailinglist.name
            msg.set_unixfrom(unixfrom)
            headers = (
                ("From", header_from),
                ("To", header_to),
                ("Subject", self.subject),
                )
            for header_name, header_value in headers:
                msg[header_name] = unfold(header_value)
            tz = get_fixed_timezone(self.timezone)
            header_date = self.date.astimezone(tz).replace(microsecond=0)
            # Date format: http://tools.ietf.org/html/rfc5322#section-3.3
            msg["Date"] = header_date.strftime("%a, %d %b %Y %H:%M:%S %z")
            msg["Message-ID"] = "<%s>" % self.message_id
            if self.in_reply_to:
                msg["In-Reply-To"] = unfold(self.in_reply_to)

            # Body
            #content = self.ADDRESS_REPLACE_RE.sub(r"\1(a)\2", self.content)

            # Enforce `multipart/mixed` even when there are no attachments.
            msg.set_content(self.content, subtype='plain')
            msg.make_mixed()

            # Attachments
            for attachment in self.attachments.order_by("counter"):
                mimetype = attachment.content_type.split('/', 1)
                msg.add_attachment(attachment.get_content(), maintype=mimetype[0],
                                   subtype=mimetype[1], filename=attachment.name)

            return msg

        @property
        def display_fixed(self):
            return "@@" in self.content

        def _set_message_id_hash(self):
            from hyperkitty.lib.utils import get_message_id_hash  # circular import
            if not self.message_id_hash:
                self.message_id_hash = get_message_id_hash(self.message_id)

        def on_post_init(self):
            self._set_message_id_hash()

        def on_post_created(self):
            self.thread.on_email_added(self)
            self.mailinglist.on_email_added(self)
            if not getattr(settings, "HYPERKITTY_BATCH_MODE", False):
                # For batch imports, let the cron job do the work
                from hyperkitty.tasks import check_orphans
                check_orphans(self.id)

        def on_pre_save(self):
            self._set_message_id_hash()
            # Link to the thread
            if self.thread_id is None:
                # Create the thread if not found
                thread, _thread_created = Thread.objects.get_or_create(
                    mailinglist=self.mailinglist,
                    thread_id=self.message_id_hash)
                self.thread = thread
            # Make sure there is only one email with parent_id == None in a thread
            if self.parent_id is not None:
                return
            starters = Email.objects.filter(
                    thread=self.thread, parent_id__isnull=True
                ).values_list("id", flat=True)
            if len(starters) > 0 and list(starters) != [self.id]:
                raise IntegrityError("There can be only one email with "
                                     "parent_id==None in the same thread")

        def on_post_save(self):
            pass

        def on_pre_delete(self):
            # Reset parent_id
            children = self.children.order_by("date")
            if not children:
                return
            if self.parent is None:
                #  Temporarily set the email's parent_id to not None, to allow the
                #  next email to be the starting email (there's a check on_save for
                #  duplicate thread starters)
                self.parent = self
                self.save(update_fields=["parent"])
                starter = children[0]
                starter.parent = None
                starter.save(update_fields=["parent"])
                children.all().update(parent=starter)
            else:
                children.update(parent=self.parent)

        def on_post_delete(self):
            try:
                thread = Thread.objects.get(id=self.thread_id)
            except Thread.DoesNotExist:
                pass
            else:
                thread.on_email_deleted(self)
            try:
                mlist = MailingList.objects.get(pk=self.mailinglist_id)
            except MailingList.DoesNotExist:
                pass
            else:
                mlist.on_email_deleted(self)

        def on_vote_added(self, vote):
            from hyperkitty.tasks import rebuild_email_cache_votes
            rebuild_email_cache_votes(self.id)

        on_vote_deleted = on_vote_added


    class Attachment(models.Model):
        email = models.ForeignKey(
            "Email", related_name="attachments", on_delete=models.CASCADE)
        counter = models.SmallIntegerField()
        name = models.CharField(max_length=255)
        content_type = models.CharField(max_length=255)
        encoding = models.CharField(max_length=255, null=True)
        size = models.IntegerField(null=True)
        content = models.BinaryField(null=True)

        class Meta:
            unique_together = ("email", "counter")

        def on_pre_save(self):
            # set the size
            if not self.size and self.content is not None:
                self.size = len(self.content)

        def _get_folder(self):
            global_folder = getattr(
                settings, "HYPERKITTY_ATTACHMENT_FOLDER", None)
            if global_folder is None:
                return None
            mlist = self.email.mailinglist.name
            try:
                listname, domain = mlist.rsplit("@", 1)
            except ValueError:
                listname = "none"
                domain = mlist
            return os.path.join(
                global_folder, domain, listname,
                self.email.message_id_hash[0:2],
                self.email.message_id_hash[2:4],
                self.email.message_id_hash[4:6],
                str(self.email.id),
            )

        def get_content(self):
            folder = self._get_folder()
            if folder is None:
                return bytes(self.content)
            filepath = os.path.join(folder, str(self.counter))
            if not os.path.exists(filepath):
                logger.error("Could not find local attachment %s for email %s",
                             self.counter, self.email.id)
                return ""
            with open(filepath, "rb") as f:
                content = f.read()
            return content

        def set_content(self, content):
            if isinstance(content, str):
                if self.encoding is not None:
                    content = content.encode(self.encoding, errors='replace')
                else:
                    content = content.encode('utf-8')
            self.size = len(content)
            folder = self._get_folder()
            if folder is None:
                self.content = content
                return
            if not os.path.exists(folder):
                os.makedirs(folder)
            with open(os.path.join(folder, str(self.counter)), "wb") as f:
                f.write(content)
            self.content = None    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-webpage-hack
  namespace: mail
data:
  command.py: |
    # Copyright (C) 1998-2021 by the Free Software Foundation, Inc.
    #
    # This file is part of GNU Mailman.
    #
    # GNU Mailman is free software: you can redistribute it and/or modify it under
    # the terms of the GNU General Public License as published by the Free
    # Software Foundation, either version 3 of the License, or (at your option)
    # any later version.
    #
    # GNU Mailman is distributed in the hope that it will be useful, but WITHOUT
    # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
    # more details.
    #
    # You should have received a copy of the GNU General Public License along with
    # GNU Mailman.  If not, see <https://www.gnu.org/licenses/>.

    """-request robot command runner."""

    # See the delivery diagram in IncomingRunner.py.  This module handles all
    # email destined for mylist-request, -join, and -leave.  It no longer handles
    # bounce messages (i.e. -admin or -bounces), nor does it handle mail to
    # -owner.

    import base64
    import re
    import logging

    from contextlib import suppress
    from email.errors import HeaderParseError
    from email.header import decode_header, make_header
    from email.iterators import typed_subpart_iterator
    from io import StringIO
    from mailman.config import config
    from mailman.core.i18n import _
    from mailman.core.runner import Runner
    from mailman.email.message import UserNotification
    from mailman.interfaces.autorespond import ResponseAction
    from mailman.interfaces.command import ContinueProcessing, IEmailResults
    from mailman.interfaces.languages import ILanguageManager
    from public import public
    from zope.component import getUtility
    from zope.interface import implementer


    NL = '\n'
    log = logging.getLogger('mailman.vette')


    class CommandFinder:
        """Generate commands from the content of a message."""

        def __init__(self, msg, msgdata, results):
            self.command_lines = []
            self.ignored_lines = []
            self.processed_lines = []
            self.send_response = True
            # Depending on where the message was destined to, add some implicit
            # commands.  For example, if this was sent to the -join or -leave
            # addresses, it's the same as if 'join' or 'leave' commands were sent
            # to the -request address.
            is_address_command = False
            subaddress = msgdata.get('subaddress')
            if subaddress == 'join':
                self.command_lines.append('join')
                self.send_response = False
                is_address_command = True
            elif subaddress == 'leave':
                self.command_lines.append('leave')
                is_address_command = True
                self.send_response = False
            elif subaddress == 'confirm':
                mo = re.match(config.mta.verp_confirm_regexp, msg.get('to', ''))
                if mo:
                    self.command_lines.append('confirm ' + mo.group('cookie'))
                    is_address_command = True
                    self.send_response = False
            # Stop processing if the address already contained a valid command
            if is_address_command:
                return
            # Extract the subject header and do RFC 2047 decoding.
            raw_subject = msg.get('subject', '')
            try:
                subject = str(make_header(decode_header(raw_subject)))
                # Mail commands must be ASCII.
                # NOTE(tommylikehu): remove all none ascii characters via encoding with ignore option.
                self.command_lines.append(subject.encode('us-ascii', 'ignore'))
            except (HeaderParseError, UnicodeError, LookupError):
                # The Subject header was unparseable or not ASCII.  If the raw
                # subject is a unicode object, convert it to ASCII ignoring all
                # bogus characters.  Otherwise, there's nothing in the subject
                # that we can use.
                if isinstance(raw_subject, str):
                    safe_subject = raw_subject.encode('us-ascii', 'ignore')
                    self.command_lines.append(safe_subject)
            # Find the first text/plain part of the message.
            part = None
            for part in typed_subpart_iterator(msg, 'text', 'plain'):
                break
            if part is None or part is not msg:
                # Either there was no text/plain part or we ignored some
                # non-text/plain parts.
                print(_('Ignoring non-text/plain MIME parts'), file=results)
            if part is None:
                # There was no text/plain part to be found.
                return
            body = part.get_payload(decode=True)
            # text/plain parts better have string payloads.
            assert body is not None, 'Non-string decoded payload'
            body = body.decode(part.get_content_charset('us-ascii'), errors='replace')
            lines = body.splitlines()
            # Use no more lines than specified
            max_lines = int(config.mailman.email_commands_max_lines)
            self.command_lines.extend(lines[:max_lines])
            self.ignored_lines.extend(lines[max_lines:])

        def __iter__(self):
            """Return each command line, split into space separated arguments."""
            while self.command_lines:
                line = self.command_lines.pop(0)
                self.processed_lines.append(line)
                parts = line.strip().split()
                if len(parts) == 0:
                    continue
                # Ensure that all the parts are unicodes.  Since we only accept
                # ASCII commands and arguments, ignore anything else.
                parts = [(part.lower()
                          if isinstance(part, str)
                          else part.decode('ascii', 'ignore').lower())
                         for part in parts]
                yield parts


    @public
    @implementer(IEmailResults)
    class Results:
        """The email command results."""

        def __init__(self, charset='us-ascii'):
            self._output = StringIO()
            self.charset = charset
            print(_("""\
    The results of your email command are provided below.
    """), file=self._output)

        def write(self, text):
            if isinstance(text, bytes):
                text = text.decode(self.charset, 'ignore')
            self._output.write(text)

        def __str__(self):
            value = self._output.getvalue()
            assert isinstance(value, str), 'Not a string: %r' % value
            return value


    @public
    class CommandRunner(Runner):
        """The email command runner."""

        def _dispose(self, mlist, msg, msgdata):
            message_id = msg.get('message-id', 'n/a')
            # The policy here is similar to the Replybot policy.  If a message has
            # "Precedence: bulk|junk|list" and no "X-Ack: yes" header, we discard
            # the command message.
            precedence = msg.get('precedence', '').lower()
            ack = msg.get('x-ack', '').lower()
            if ack != 'yes' and precedence in ('bulk', 'junk', 'list'):
                log.info('%s Precedence: %s message discarded by: %s',
                         message_id, precedence, mlist.request_address)
                return False
            # Do replybot for commands.
            replybot = config.handlers['replybot']
            replybot.process(mlist, msg, msgdata)
            if mlist.autorespond_requests == ResponseAction.respond_and_discard:
                # Respond and discard.
                log.info('%s -request message replied and discarded', message_id)
                return False
            # Now craft the response and process the command lines.
            charset = msg.get_param('charset')
            if charset is None:
                charset = 'us-ascii'
            results = Results(charset)
            # Include just a few key pieces of information from the original: the
            # sender, date, and message id.
            print(_('- Original message details:'), file=results)
            subject = msg.get('subject', 'n/a')                      # noqa: F841
            date = msg.get('date', 'n/a')                            # noqa: F841
            from_ = msg.get('from', 'n/a')                           # noqa: F841
            print(_('    From: $from_'), file=results)
            print(_('    Subject: $subject'), file=results)
            print(_('    Date: $date'), file=results)
            print(_('    Message-ID: $message_id'), file=results)
            print(_('\n- Results:'), file=results)
            finder = CommandFinder(msg, msgdata, results)
            for parts in finder:
                command = None
                # Try to find a command on this line.  There may be a Re: prefix
                # (possibly internationalized) so try with the first and second
                # words on the line.
                if len(parts) > 0:
                    command_name = parts.pop(0)
                    command = config.commands.get(command_name)
                if command is None and len(parts) > 0:
                    command_name = parts.pop(0)
                    command = config.commands.get(command_name)
                if command is None:
                    print(_('No such command: $command_name'), file=results)
                else:
                    status = command.process(
                        mlist, msg, msgdata, parts, results)
                    assert status in ContinueProcessing, (
                        'Invalid status: %s' % status)
                    if status == ContinueProcessing.no:
                        break
            # All done. If we don't need to send response, return.
            if not finder.send_response:
                return
            # Strip blank lines and send the response.
            lines = [line.strip() for line in finder.command_lines if line]
            if len(lines) > 0:
                print(_('\n- Unprocessed:'), file=results)
                for line in lines:
                    print(line, file=results)
            lines = [line.strip() for line in finder.ignored_lines if line]
            if len(lines) > 0:
                print(_('\n- Ignored:'), file=results)
                for line in lines:
                    print(line, file=results)
            print(_('\n- Done.'), file=results)
            # Send a reply, but do not attach the original message.  This is a
            # compromise because the original message is often helpful in tracking
            # down problems, but it's also a vector for backscatter spam.
            language = getUtility(ILanguageManager)[msgdata['lang']]
            reply = UserNotification(msg.sender, mlist.bounces_address,
                                     _('The results of your email commands'),
                                     lang=language)
            cte = msg.get('content-transfer-encoding')
            if cte is not None:
                reply['Content-Transfer-Encoding'] = cte
            # Find a charset for the response body.  Try the original message's
            # charset first, then ascii, then latin-1 and finally falling back to
            # utf-8.
            reply_body = str(results)
            for charset in (results.charset, 'us-ascii', 'latin-1'):
                with suppress(UnicodeError):
                    reply_body.encode(charset)
                    break
            else:
                charset = 'utf-8'
            reply.set_payload(reply_body, charset=charset)
            reply.send(mlist)
  summary.html: |
    {% extends "postorius/base.html" %}
    {% load i18n %}
    {% load bootstrap_tags %}
    {% load nav_helpers %}

    {% block head_title %}
    {% trans 'Info' %} | {{ list.fqdn_listname }} - {{ block.super }}
    {% endblock %}

    {% block content %}

    {% list_nav 'list_summary' 'Summary' %}

    <p>{{ list.settings.description }}</p>
    {% if list.settings.info %}
    <p><pre style="white-space: pre-wrap; word-break: normal; border: none; background: none;">{{ list.settings.info }}</pre></p>
    {% endif %}
    <p>{% trans 'To contact the list owners, use the following email address:' %} <em>{{ list.settings.owner_address }}</em></p>

    {# Archives #}
    {% if hyperkitty_enabled %}
    {% if not public_archive and not user.is_authenticated %}
    <p>
        {% trans 'You have to login to visit the archives of this list.' %}
    </p>
    {% else %}
    {% url 'hk_list_overview' list.fqdn_listname as hyperkitty_list_url %}
    <p>
        {% blocktrans %}
        To see the prior postings to this list, visit
        <a href="{{ hyperkitty_list_url }}">the archives</a>.
        {% endblocktrans %}
    </p>
    {% endif %}
    {% endif %}

    <hr />

    {# Subscription #}
    {% if user.is_authenticated %}
    {% if user_subscribed %}
    <h2>{% trans 'Subscription / Unsubscription' %}</h2>
    <p>
        {% trans 'You are subscribed to this list with the following address:' %} <em>{{ subscribed_address }}</em>
    </p>
    {% url 'user_list_options' list.list_id as user_list_options_url %}
    <p>
        {% blocktrans %}
        You can manage your subscription on <a href="{{ user_list_options_url }}">your list options page</a>
        {% endblocktrans %}
    </p>
    <p>
    <form method="post" action="{% url 'list_unsubscribe' list.list_id %}">
        {% csrf_token %}
        <input type="hidden" name="email" value="{{ subscribed_address }}" />
        <button type="submit" class="btn btn-danger">{% trans 'Unsubscribe' %}</button>
    </form>
    </p>
    {% elif user_request_pending %}
    <h4>{% trans "You have a subscription request pending. If you don't hear back soon, please contact the list owners." %}</h4>
    {% else %}
    <h2>{% trans 'Subscribe to this list' %}</h2>
    <p>
        {% blocktrans with address=list.settings.join_address %}
        To subscribe you can send an email with 'subscribe' in the subject to
        <a href="mailto:{{ address }}?subject=Subscribe">{{ address }}</a>
        or use the form below:
        {% endblocktrans %}
    </p>
    <form action="{% url 'list_subscribe' list.list_id %}" method="post" class="form-horizontal">
        {% bootstrap_form_horizontal subscribe_form 2 8 'Subscribe' %}
    </form>
    {% endif %}
    {% else %}
    <div>
        <p>
            {% blocktrans %}
            You can also subscribe without creating an account.
            If you wish to do so, please use the form below.
            {% endblocktrans%}
        </p>
        <form action="{% url 'list_anonymous_subscribe' list.list_id %}"
              method="post" class="form-horizontal">
            {% bootstrap_form_horizontal anonymous_subscription_form 2 8 'Subscribe' %}
        </form>
    </div>
    {% endif %}

    {# List metrics #}
    {% if user.is_authenticated %}
    {% if user.is_list_owner or user.is_superuser %}
    <hr />
    <h3>{% trans 'List metrics' %}</h3>
    <dl class="dl-horizontal">
        <dt>{% trans 'Created at' %}</dt><dd>{{ list.settings.created_at }}</dd>
        <dt>{% trans 'Last post at' %}</dt><dd>{{ list.settings.last_post_at }}</dd>
        <dt>{% trans 'Digest last sent at' %}</dt><dd>{{ list.settings.digest_last_sent_at }}</dd>
        <dt>{% trans 'Volume' %}</dt><dd>{{ list.settings.volume }}</dd>
    </dl>
    {% endif %}
    {% endif %}
    {% endblock %}
